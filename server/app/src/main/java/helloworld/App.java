/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package helloworld;

import java.net.InetSocketAddress;
import java.nio.ByteBuffer;

import org.apache.log4j.PropertyConfigurator;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

public class App extends WebSocketServer {

	public App(InetSocketAddress address) {
		super(address);
	}

	@Override
	public void onOpen(WebSocket conn, ClientHandshake handshake) {
		String host = conn.getRemoteSocketAddress().toString();
		System.out.println("new connection to " + host);
		HandleMessage.newBuffer(host);
		
	}

	@Override
	public void onClose(WebSocket conn, int code, String reason, boolean remote) {
		System.out.println("closed " + conn.getRemoteSocketAddress() + " with exit code " + code + " additional info: " + reason);
		HandleMessage.clearMessageBuffer(conn.getRemoteSocketAddress().toString());
	}

	@Override
	public void onMessage(WebSocket conn, String message) {
		if(message == ""){
		System.out.println("received message from "	+ conn.getRemoteSocketAddress() + ": " + message);
		System.out.println("This will be ignored");
		}
		else{
			System.out.println("received message from "	+ conn.getRemoteSocketAddress() + ": " + message);
			HandleMessage.appendMessageBuffer(message, conn.getRemoteSocketAddress().toString());
		}
	}

	//binary
	@Override
	public void onMessage( WebSocket conn, ByteBuffer b ) {
		//System.out.println("received ByteBuffer from "	+ conn.getRemoteSocketAddress());
		//remaining = len equivlent, I love java
		for (int i = 0; i < b.remaining(); i++) {
			byte in = b.get();
			//System.out.println(Integer.toBinaryString((in & 0xFF) + 0x100).substring(1));
			byte checkb = 127;
			int check = Byte.compare(checkb, in);
			if(check==0){
				System.out.println("flushing buffer");
				HandleMessage.clearMessageBuffer(conn.getRemoteSocketAddress().toString());
			}
		  }

	}

	@Override
	public void onError(WebSocket conn, Exception ex) {
		System.err.println("an error occurred on connection " + conn.getRemoteSocketAddress()  + ":" + ex);
	}
	
	@Override
	public void onStart() {
		System.out.println("server started successfully  ");
		HandleMessage.init(); 
	}


	public static void main(String[] args) {
		String log4jConfPath = System.getProperty("user.dir") + "/log4j.properties";
		PropertyConfigurator.configure(log4jConfPath);
		String host = "localhost";
		int port = 8887;

		WebSocketServer server = new App(new InetSocketAddress(host, port));
		server.run();
	}
}